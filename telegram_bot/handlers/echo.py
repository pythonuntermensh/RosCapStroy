from aiogram import types
from aiogram.dispatcher.storage import FSMContext

from loader import dp, bot, predictor, ADMIN_ID

from keyboards import menu
from states import Vacancy, Report


@dp.message_handler(text=["–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é‚úÖ"])
async def handle_default_echo(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
    await Vacancy.waiting_for_vacancy_text.set()

@dp.message_handler(state=Vacancy.waiting_for_vacancy_text, content_types=types.ContentType.TEXT)
async def handle_default_echo(message: types.Message, state: FSMContext):
    prediction = predictor.get_final_categories(message.text)
    text = ""
    text += "" if "responsibilities" not in prediction else "–î–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: " + prediction["responsibilities"]
    text += "" if "responsibilities" not in prediction else "\n\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—é: " + prediction["requirements"]
    text += "" if "responsibilities" not in prediction else "\n\n–£—Å–ª–æ–≤–∏—è: " + prediction["terms"]
    text += "" if "responsibilities" not in prediction else "\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏—è: " + prediction["notes"]

    await message.answer(str(text), reply_markup=menu)
    await state.finish()


@dp.message_handler(text=["–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤üí¨"])
async def handle_default_echo(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–∑—ã–≤")
    await Report.waiting_for_report_text.set()

@dp.message_handler(state=Report.waiting_for_report_text, content_types=types.ContentType.TEXT)
async def handle_default_echo(message: types.Message, state: FSMContext):
    await bot.send_message(ADMIN_ID, "–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤! –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:\n\n" + message.text)
    await message.answer("–í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!", reply_markup=menu)
    await state.finish()


@dp.message_handler(text=["–ù–∞—à —Å–∞–π—Çüòà"])
async def handle_default_echo(message: types.Message):
    await message.answer("–ù–∞—à –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–π –≤–µ–±-—Å–∞–π—Ç - https://12mativ.github.io/RosCapStroyWeb/", reply_markup=menu)


@dp.message_handler(state=None)
async def handle_default_echo(message: types.Message):
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!‚õî", reply_markup=menu)




